install.packages("usethis")
library("usethis")
getwd()
?use_mit_license
usethis::use_mit_license("Joshua Efe")
devtools::document()
usethis::use_readme_rmd()
devtools::build_readme()
getwd()
usethis::use_r("getFasta")
getwd()
dnafile <- system.file("sequences/malM.fasta", package = "seqinr")
dnafile
dnafile <- system.file("sequences/malM.fasta", package = "seqinr")
getFasta <- function(nameOfFile){
Dna <- read.fasta(file = nameOfFile)
return(Dna)
}
try <- getFasta(dnafile)
install.packages("seqinr")
library("seqinr")
install.packages("seqinr")
dnafile <- system.file("sequences/malM.fasta", package = "seqinr")
getFasta <- function(nameOfFile){
Dna <- seqinr::read.fasta(file = nameOfFile)
return(Dna)
}
try <- getFasta(dnafile)
try
try[0]
try[1]
try["name"]
dnafile <- system.file("sequences/malM.fasta", package = "seqinr")
getFasta <- function(nameOfFile){
Dna <- seqinr::read.fasta(file = nameOfFile)[[1]]
return(Dna)
}
try <- getFasta(dnafile)
try
getFasta <- function(nameOfFile){
Dna <- seqinr::read.fasta(file = nameOfFile, as.string = TRUE, seqtype = "DNA")[[1]]
return(Dna)
}
try <- getFasta(dnafile)
try
getFasta <- function(nameOfFile){
Dna <- seqinr::read.fasta(file = nameOfFile, seqtype = "DNA")[[1]]
return(Dna)
}
try <- getFasta(dnafile)
try
usethis::use_r("getBlastResults")
install_github("mhahsler/rBLAST")
install.packages("devtools")
devtools::install_github("hadley/devtools")
install_github("mhahsler/rBLAST")
library("devtools")
install_github("mhahsler/rBLAST")
install.packages("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
library("devtools")
install_github("mhahsler/rBLAST")
? blast
?blast
source("https://bioconductor.org/biocLite.R")
biocLite("BgeeDB")
# load the library
library(BgeeDB)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
biocLite("BgeeDB")
BiocManager::install("BgeeDB")
listBgeeSpecies()
library("BgeeDB")
listBgeeSpecies()
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
Bgee
Bgee$new(species = "Mus_musculus")
Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
bgee <- Bgee$new(species = "Mus_musculus")
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
dataMouseGSE43721 <- getData(bgee, experimentId = "GSE43721")
dataMouseGSE43721 <- getData(bgee, experimentId = "GSE30617")
listBgeeSpecies(release = "13.2", order = 2)
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
listBgeeSpecies(release = "13.2", order = 2)
getAnnotation(bgee)
annotation_bgee_mouse <- getAnnotation(bgee)
annotation_bgee_mouse <- getAnnotation(bgee)
annotation_bgee_mouse <- getAnnotation(bgee)
annotation_bgee_mouse <- getAnnotation(bgee)
annotation_bgee_mouse
# download all RNA-seq experiments from mouse
data_bgee_mouse <- getData(bgee)
getwd()
getwd()
setwd("/Users/joshuaefe/Documents/COURSES_FALL_2020/BCB410/Package")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BgeeDB")
listBgeeSpecies()
library("BgeeDB")
listBgeeSpecies()
listBgeeSpecies(release = "13.2", order = 2)
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
annotation_bgee_mouse <- getAnnotation(bgee)
data_bgee_mouse <- getData(bgee)
length(data_bgee_mouse)
lapply(data_bgee_mouse, head)
data_bgee_experiment1 <- data_bgee_mouse[[1]]
# download data for GSE30617
data_bgee_mouse_gse30617 <- getData(bgee, experimentId = "GSE30617")
# Examples of data downloading using different filtering combination
# retrieve mouse RNA-Seq data for heart or brain
data_bgee_mouse_filters <- getData(bgee, anatEntityId = c("UBERON:0000955","UBERON:0000948"))
# retrieve mouse RNA-Seq data for heart (UBERON:0000955) or brain (UBERON:0000948) part of the experiment GSE30617
gene.expression.mouse.fpkm <- formatData(bgee, data_bgee_mouse_gse30617, callType = "present", stats = "fpkm")
gene.expression.mouse.fpkm
#Running example: TopAnat gene expression enrichment analysis
# Creating new Bgee class object
bgee <- Bgee$new(species = "Danio_rerio")
bgee
bgee <- Bgee$new(species = "Danio_rerio", dataType = "rna_seq")
# Loading calls of expression
myTopAnatData <- loadTopAnatData(bgee)
# Look at the data
str(myTopAnatData)
bgee <- Bgee$new(species = "Danio_rerio", dataType="affymetrix")
myTopAnatData <- loadTopAnatData(bgee, stage="UBERON:0000068", confidence="silver")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
# get the mapping of Ensembl genes to phenotypes. It will corresponds to the background genes
universe <- getBM(filters=c("phenotype_source"), value=c("ZFIN"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ensembl)
# select phenotypes related to pectoral fin
phenotypes <- grep("pectoral fin", unique(universe$phenotype_description), value=T)
# Foreground genes are those with an annotated phenotype related to "pectoral fin"
myGenes <- unique(universe$ensembl_gene_id[universe$phenotype_description %in% phenotypes])
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
ensembl
universe
listDatasets()
listDatasets(mart = ensembl)
listAttributes(mart = ensembl)
searchFilterOptions(mart = ensembl, filter = "phenotype_description")
library(biomaRt)
listFilterOptions(mart = ensembl, filter = "phenotype_description")
?biomart
?biomart
library(biomaRt)
listFilter(mart = ensembl, filter = "phenotype_description")
listFilters(mart = ensembl, filter = "phenotype_description")
listFilterOptions(mart = ensembl, filter = "phenotype_source")
filterOptions("phenotype_source", mart)
filterOptions("phenotype_source", mart = ensembl)
names(geneList)
universe
en2 <- useEnsembl(biomart = "ensembl")
en2
universe2 <- getBM(filters=c("phenotype_source"), attributes=c("ensembl_gene_id","phenotype_description"), mart=en2)
?listDatasets
listDatasets(en2)
listDatasets(en2)[0]
typeof(listDatasets(en2))
listDatasets(en2)[[1]]
listDatasets(en2)[[1:1]]
example <- listDatasets(en2)[[1,1]]
example
universe2 <- getBM(filters=c("phenotype_source"), attributes=c("ensembl_gene_id","phenotype_description"), mart=example)
ex2<- useMart("ENSEMBL_MART_ENSEMBL", dataset=example)
universe2 <- getBM(filters=c("phenotype_source"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ex2)
filterOptions("phenotype_source", mart = ensembl)
filterOptions("phenotype_source", mart = ex2)
filterOptions("phenotype_source", mart = ensembl)
en2 <- useEnsembl(biomart = "ensembl")
listDatasets(en2)
example <- listDatasets(en2)[[1,1]]
ex2<- useMart("ENSEMBL_MART_ENSEMBL", dataset=example)
filterOptions("phenotype_source", mart = ex2)
example
ex2
ensembl
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
en3 <- useEnsembl(biomart = "genes")
datasets <- listDatasets(en3)
head(datasets)
listEnsembl()
searchDatasets(mart = en3, pattern = "gene")
searchDatasets(mart = en3, pattern = "gene")
universe2 <- getBM(filters=c("phenotype_source"), values =affyids, attributes=c("ensembl_gene_id","phenotype_description"), mart=ex2)
searchDatasets(mart = en3, pattern = "gene")
list2<-searchDatasets(mart = en3, pattern = "gene")
list[[1,1]]
list[[1]]
list[1]
list
dataset[1]
en3 <- useEnsembl(biomart = "genes")
datasets <- listDatasets(en3)
dataset[1]
datasets[1]
datasets[1,1]
test<-datasets[1,1]
listAttributes(test)
test2 <- useMart("ENSEMBL_MART_ENSEMBL", dataset=test)
test2 <- useMart("ENSEMBL_MART_ENSEMBL", dataset=test)
listAttributes(test2)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
# get the mapping of Ensembl genes to phenotypes. It will corresponds to the background genes
universe <- getBM(filters=c("phenotype_source"), value=c("ZFIN"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ensembl)
# select phenotypes related to pectoral fin
phenotypes <- grep("pectoral fin", unique(universe$phenotype_description), value=T)
# Foreground genes are those with an annotated phenotype related to "pectoral fin"
myGenes <- unique(universe$ensembl_gene_id[universe$phenotype_description %in% phenotypes])
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
# Prepare the topGO object
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
results <- runTest(myTopAnatObject, algorithm = 'weight', statistic = 'fisher')
head(tableOver)
# Display results sigificant at a 1% FDR threshold
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 0.01)
head(tableOver)
results <- runTest(myTopAnatObject, algorithm = 'weight', statistic = 'fisher')
data(geneList)
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
results <- runTest(myTopAnatObject, algorithm = 'weight', statistic = 'fisher')
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
# get the mapping of Ensembl genes to phenotypes. It will corresponds to the background genes
universe <- getBM(filters=c("phenotype_source"), value=c("ZFIN"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ensembl)
# select phenotypes related to pectoral fin
phenotypes <- grep("pectoral fin", unique(universe$phenotype_description), value=T)
# Foreground genes are those with an annotated phenotype related to "pectoral fin"
myGenes <- unique(universe$ensembl_gene_id[universe$phenotype_description %in% phenotypes])
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
# Prepare the topGO object
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
data(geneList)
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
results <- runTest(myTopAnatObject, algorithm = 'weight', statistic = 'fisher')
# Display results sigificant at a 1% FDR threshold
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 0.01)
# Display results sigificant at a 1% FDR threshold
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 0.1)
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 4)
head(tableOver)
term <- "UBERON:00030777"
termStat(myTopAnatObject, term)
term <- "UBERON:0004357"
termStat(myTopAnatObject, term)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2016.archive.ensembl.org")
# get the mapping of Ensembl genes to phenotypes. It will corresponds to the background genes
universe <- getBM(filters=c("phenotype_source"), value=c("ZFIN"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ensembl)
# select phenotypes related to pectoral fin
phenotypes <- grep("pectoral fin", unique(universe$phenotype_description), value=T)
# Foreground genes are those with an annotated phenotype related to "pectoral fin"
myGenes <- unique(universe$ensembl_gene_id[universe$phenotype_description %in% phenotypes])
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
# Prepare the topGO object
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2019.archive.ensembl.org")
# get the mapping of Ensembl genes to phenotypes. It will corresponds to the background genes
universe <- getBM(filters=c("phenotype_source"), value=c("ZFIN"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ensembl)
# select phenotypes related to pectoral fin
phenotypes <- grep("pectoral fin", unique(universe$phenotype_description), value=T)
# Foreground genes are those with an annotated phenotype related to "pectoral fin"
myGenes <- unique(universe$ensembl_gene_id[universe$phenotype_description %in% phenotypes])
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
# Prepare the topGO object
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
# Prepare the topGO object
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
data(geneList)
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
results <- runTest(myTopAnatObject, algorithm = 'weight', statistic = 'fisher')
# Display results sigificant at a 1% FDR threshold
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 0.01)
head(tableOver)
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 0.9)
head(tableOver)
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 50)
head(tableOver)
term <- "UBERON:0004357"
termStat(myTopAnatObject, term)
genesInTerm(myTopAnatObject, term)
listBgeeSpecies()
listBgeeSpecies(release = "13.2", order = 2)
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
annotation_bgee_mouse <- getAnnotation(bgee)
# list the first experiments and libraries
lapply(annotation_bgee_mouse, head)
listBgeeSpecies(release = "13.2", order = 2)
bgee <- Bgee$new(species = "Mus_musculus", dataType = "rna_seq")
annotation_bgee_mouse <- getAnnotation(bgee)
# list the first experiments and libraries
lapply(annotation_bgee_mouse, head)
# download all RNA-seq experiments from mouse
data_bgee_mouse <- getData(bgee)
length(data_bgee_mouse)
lapply(data_bgee_mouse, head)
# isolate the first experiment
data_bgee_experiment1 <- data_bgee_mouse[[1]]
# download data for GSE30617
data_bgee_mouse_gse30617 <- getData(bgee, experimentId = "GSE30617")
# Examples of data downloading using different filtering combination
# retrieve mouse RNA-Seq data for heart or brain
data_bgee_mouse_filters <- getData(bgee, anatEntityId = c("UBERON:0000955","UBERON:0000948"))
# retrieve mouse RNA-Seq data for heart (UBERON:0000955) or brain (UBERON:0000948) part of the experiment GSE30617
data_bgee_mouse_filters <- getData(bgee, experimentId = "GSE30617", anatEntityId = c("UBERON:0000955","UBERON:0000948"))
# retrieve mouse RNA-Seq data for heart (UBERON:0000955) or brain (UBERON:0000948) from post-embryonic stage (UBERON:0000092)
data_bgee_mouse_filters <- getData(bgee, stageId = "UBERON:0000092", anatEntityId = c("UBERON:0000955","UBERON:0000948"))
# use only present calls and fill expression matric with FPKM values
gene.expression.mouse.fpkm <- formatData(bgee, data_bgee_mouse_gse30617, callType = "present", stats = "fpkm")
gene.expression.mouse.fpkm
bgee <- Bgee$new(species = "Danio_rerio", dataType = "rna_seq")
# Loading calls of expression
myTopAnatData <- loadTopAnatData(bgee)
# Look at the data
str(myTopAnatData)
## Loading silver and gold expression calls from affymetrix data made on embryonic samples only
## This is just given as an example, but is not run in this vignette because only few data are returned
bgee <- Bgee$new(species = "Danio_rerio", dataType="affymetrix")
myTopAnatData <- loadTopAnatData(bgee, stage="UBERON:0000068", confidence="silver")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="drerio_gene_ensembl", host="mar2019.archive.ensembl.org")
# get the mapping of Ensembl genes to phenotypes. It will corresponds to the background genes
universe <- getBM(filters=c("phenotype_source"), value=c("ZFIN"), attributes=c("ensembl_gene_id","phenotype_description"), mart=ensembl)
# select phenotypes related to pectoral fin
phenotypes <- grep("pectoral fin", unique(universe$phenotype_description), value=T)
# Foreground genes are those with an annotated phenotype related to "pectoral fin"
myGenes <- unique(universe$ensembl_gene_id[universe$phenotype_description %in% phenotypes])
# Prepare the gene list vector
geneList <- factor(as.integer(unique(universe$ensembl_gene_id) %in% myGenes))
names(geneList) <- unique(universe$ensembl_gene_id)
summary(geneList)
# Prepare the topGO object
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
data(geneList)
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
data(geneList)
geneList
myTopAnatObject <-  topAnat(myTopAnatData, geneList)
results <- runTest(myTopAnatObject, algorithm = 'weight', statistic = 'fisher')
tableOver <- makeTable(myTopAnatData, myTopAnatObject, results, cutoff = 100)
head(tableOver)
tableOver
term <- "UBERON:0004357"
termStat(myTopAnatObject, term)
term <- "UBERON:0004734"
termStat(myTopAnatObject, term)
genesInTerm(myTopAnatObject, term)
# 48 significant genes mapped to this term for Bgee 14.0 and Ensembl 84
annotated <- genesInTerm(myTopAnatObject, term)[["UBERON:0004357"]]
annotated[annotated %in% sigGenes(myTopAnatObject)]
# 48 significant genes mapped to this term for Bgee 14.0 and Ensembl 84
annotated <- genesInTerm(myTopAnatObject, term)[["UBERON:0004734"]]
term <- "UBERON:0003077"
termStat(myTopAnatObject, term)
genesInTerm(myTopAnatObject, term)
annotated <- genesInTerm(myTopAnatObject, term)[["UBERON:0003077"]]
annotated[annotated %in% sigGenes(myTopAnatObject)]
list2<-searchDatasets(mart = en3, pattern = "gene")
list2
setwd("/Users/joshuaefe/Documents/COURSES_FALL_2020/BCB410/Package/ZooGVT")
setwd("/Users/joshuaefe/Documents/COURSES_FALL_2020/BCB410/Package/ZooGVT")
# attach packages
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
getwd()
